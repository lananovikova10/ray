<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/stardust/html-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://helpserver.labs.jb.gg/help/schemas/mvp/topic.v2.xsd"
       _md-based="true" id="Cool-Markdown.md" title="App Reference" meta-keywords="">

    <p>For single-app projects, the configuration is all done in a <code>.platform.app.yaml</code> file,
        usually located at the root of your app folder in your Git repository.
        Multi-app projects can be set up in various ways.</p>
    <p>See a comprehensive example of a configuration in a <code>.platform.app.yaml</code> file.
        For reference, see a log of changes to app configuration.</p>
    <chapter title="Top-level properties" id="top-level-properties">
        <p>The following table presents all properties available at the top level of the YAML for the app.
            The column
            <emphasis>Set in instance?</emphasis>
            defines whether the given property can be overridden within a <code>web</code> or <code>workers</code>
            instance.
            To override any part of a property, you have to provide the entire property.
        </p>
        <table>
            <tr>
                <td>Name</td>
                <td>Type</td>
                <td>Required</td>
                <td>Set in instance?</td>
                <td>Description</td>
            </tr>
            <tr>
                <td><code>name</code></td>
                <td><code>string</code></td>
                <td>Yes</td>
                <td>No</td>
                <td>A unique name for the app. Must be lowercase alphanumeric characters. Changing the name destroys
                    data associated with the app.
                </td>
            </tr>
            <tr>
                <td><code>type</code></td>
                <td>A <a anchor="types">type</a></td>
                <td>Yes</td>
                <td>No</td>
                <td>The base image to use with a specific app language. Format: <code>runtime:version</code>.</td>
            </tr>
            <tr>
                <td><code>size</code></td>
                <td>A <a anchor="sizes">size</a></td>
                <td></td>
                <td>Yes</td>
                <td>How much resources to devote to the app. Defaults to <code>AUTO</code> in production environments.
                </td>
            </tr>
            <tr>
                <td><code>relationships</code></td>
                <td>A dictionary of <a anchor="relationships">relationships</a></td>
                <td></td>
                <td>Yes</td>
                <td>Connections to other services and apps.</td>
            </tr>
            <tr>
                <td><code>disk</code></td>
                <td><code>integer</code> or <code>null</code></td>
                <td></td>
                <td>Yes</td>
                <td>The size of the disk space for the app in MB. Minimum value is <code>128</code>. Defaults to <code>null</code>,
                    meaning no disk is available. See <a anchor="available-disk-space">note on available space</a></td>
            </tr>
            <tr>
                <td><code>mounts</code></td>
                <td>A dictionary of <a anchor="mounts">mounts</a></td>
                <td></td>
                <td>Yes</td>
                <td>Directories that are writable even after the app is built. If set as a local source,
                    <code>disk</code> is required.
                </td>
            </tr>
            <tr>
                <td><code>web</code></td>
                <td>A <a anchor="web">web instance</a></td>
                <td></td>
                <td>N/A</td>
                <td>How the web application is served.</td>
            </tr>
            <tr>
                <td><code>workers</code></td>
                <td>A <a anchor="workers">worker instance</a></td>
                <td></td>
                <td>N/A</td>
                <td>Alternate copies of the application to run as background processes.</td>
            </tr>
            <tr>
                <td><code>timezone</code></td>
                <td><code>string</code></td>
                <td></td>
                <td>No</td>
                <td>The timezone for crons to run. Format: a <a
                        href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">TZ database name</a>.
                    Defaults to <code>UTC</code>, which is the timezone used for all logs no matter the value here. See
                    also <a href="./timezone.md">app runtime timezones</a></td>
            </tr>
            <tr>
                <td><code>access</code></td>
                <td>An <a anchor="access">access dictionary</a></td>
                <td></td>
                <td>Yes</td>
                <td>Access control for roles accessing app environments.</td>
            </tr>
            <tr>
                <td><code>variables</code></td>
                <td>A <a anchor="variables">variables dictionary</a></td>
                <td></td>
                <td>Yes</td>
                <td>Variables to control the environment.</td>
            </tr>
            <tr>
                <td><code>firewall</code></td>
                <td>A <a anchor="firewall">firewall dictionary</a></td>
                <td></td>
                <td>Yes</td>
                <td>Outbound firewall rules for the application.</td>
            </tr>
            <tr>
                <td><code>build</code></td>
                <td>A <a anchor="build">build dictionary</a></td>
                <td></td>
                <td>No</td>
                <td>What happens when the app is built.</td>
            </tr>
            <tr>
                <td><code>dependencies</code></td>
                <td>A <a anchor="dependencies">dependencies dictionary</a></td>
                <td></td>
                <td>No</td>
                <td>What global dependencies to install before the <code>build</code> hook is run.</td>
            </tr>
            <tr>
                <td><code>hooks</code></td>
                <td>A <a anchor="hooks">hooks dictionary</a></td>
                <td></td>
                <td>No</td>
                <td>What commands run at different stages in the build and deploy process.</td>
            </tr>
            <tr>
                <td><code>crons</code></td>
                <td>A <a anchor="crons">cron dictionary</a></td>
                <td></td>
                <td>No</td>
                <td>Scheduled tasks for the app.</td>
            </tr>
            <tr>
                <td><code>source</code></td>
                <td>A <a anchor="source">source dictionary</a></td>
                <td></td>
                <td>No</td>
                <td>Information on the app's source code and operations that can be run on it.</td>
            </tr>
            <tr>
                <td><code>runtime</code></td>
                <td>A <a anchor="runtime">runtime dictionary</a></td>
                <td></td>
                <td>No</td>
                <td>Customizations to your PHP or Lisp runtime.</td>
            </tr>
            <tr>
                <td><code>additional_hosts</code></td>
                <td>An <a anchor="additional-hosts">additional hosts dictionary</a></td>
                <td></td>
                <td>Yes</td>
                <td>Maps of hostnames to IP addresses.</td>
            </tr>
        </table>
    </chapter>
    <chapter title="Root directory" id="root-directory">
        <p>Some of the properties you can define are relative to your app's root directory.
            The root defaults to the location of your <code>.platform.app.yaml</code> file.
            To specify another directory, for example for a multi-app project,
            use the <code>source.root</code> property.</p>
    </chapter>
    <chapter title="Types" id="types">
        <p>The <code>type</code> defines the base container image used to run the application.
            Available languages and their supported versions:</p>
        <chapter title="Example configuration" id="example-configuration">
            <p>These are used in the format <code>runtime:version</code>:</p>
            <p>{{&lt; readFile file=&quot;src/registry/images/examples/full/php.app.yaml&quot; highlight=&quot;yaml&quot;
                location=&quot;.platform.app.yaml&quot; &gt;}}</p>
        </chapter>
    </chapter>
    <chapter title="Sizes" id="sizes">
        <p>Resources are distributed across all containers in a project from the total available from your <a
                href="faq.topic">plan size</a>.
            So if you have more than just a single app, it doesn't get all of the resources available.</p>
        <p>By default, resource sizes (CPU and memory) are chosen automatically for an app
            based on the plan size and the number of other containers in the cluster.
            Most of the time, this automatic sizing is enough.</p>
        <p>You can set sizing suggestions for production environments when you know a given container has specific
            needs.
            Such as a worker that doesn't need much and can free up resources for other apps.
            To do so, set <code>size</code> to one of the following values:</p>
        <list>
            <li><code>S</code></li>
            <li><code>M</code></li>
            <li><code>L</code></li>
            <li><code>XL</code></li>
            <li><code>2XL</code></li>
            <li><code>4XL</code></li>
        </list>
        <p>The total resources allocated across all apps and services can't exceed what's in your plan.</p>
        <chapter title="Sizes in development environments" id="sizes-in-development-environments">
            <p>Containers in development environments don't follow the <code>size</code> specification.
                Application containers are set based on the plan's setting for
                <control>Environments application size</control>
                .
                The default is
                <control>{{&lt; partial &quot;plans/default-dev-env-size&quot; &gt;}}</control>
                , but you can increase it by editing your plan.
                (Service containers in development environments are always set to {{&lt; partial &quot;plans/default-dev-env-size&quot;
                &gt;}} size.)
            </p>
        </chapter>
    </chapter>
    <chapter title="Relationships" id="relationships">
        <p>To access another container within your project, you need to define a relationship to it.</p>
        <img src="/images/management-console/relationships.png" alt="Relationships Diagram" title="0.5"/>
        <p>You can give each relationship any name you want.
            This name is used in the <code>PLATFORM_RELATIONSHIPS</code> environment variable,
            which gives you credentials for accessing the service.</p>
        <p>The relationship is specified in the form <code>service_name:endpoint_name</code>.
            The <code>service_name</code> is the name of the service given in the <a href="../add-services/_index.md">services
                configuration</a>
            or the name of another application in the same project specified as the <code>name</code> in that app's
            configration.</p>
        <p>The <code>endpoint_name</code> is the exposed functionality of the service to use.
            For most services, the endpoint is the same as the service type.
            For some services (such as <a href="../add-services/mysql/_index.md" anchor="multiple-databases">MariaDB</a>
            and <a href="../add-services/solr.md" anchor="solr-6-and-later">Solr</a>),
            you can define additional explicit endpoints for multiple databases and cores in the <a
                    href="../add-services/_index.md">service's configuration</a>.</p>
        <p>The following example shows a single MySQL service named <code>mysqldb</code> offering two databases,
            a Redis cache service named <code>rediscache</code>, and an Elasticsearch service named
            <code>searchserver</code>.</p>

        <code-block lang="yaml">
            relationships:
            database: 'mysqldb:db1'
            database2: 'mysqldb:db2'
            cache: 'rediscache:redis'
            search: 'searchserver:elasticsearch'
        </code-block>
    </chapter>
    <chapter title="Available disk space" id="available-disk-space">
        <p>The maximum total space available to all applications and services is set by the storage in your plan
            settings.
            When deploying your project, the sum of all <code>disk</code> keys defined in app and service configurations
            must be
            <emphasis>equal or less</emphasis>
            than the plan storage size.
        </p>
        <p>So if your
            <emphasis>plan storage size</emphasis>
            is 5 GB, you can, for example, assign it in one of the following ways:
        </p>
        <list>
            <li>2 GB to your application, 3 GB to your database</li>
            <li>1 GB to your application, 4 GB to your database</li>
            <li>1 GB to your application, 1 GB to your database, 3 GB to your Elasticsearch service</li>
        </list>
        <p>If you exceed the total space available, you receive an error on pushing your code.
            You need to either increase your plan's storage or decrease the <code>disk</code> values you've assigned.
        </p>
        <chapter title="Downsize a disk" id="downsize-a-disk">
            <p>{{% disk-downsize type=&quot;app&quot; %}}</p>
        </chapter>
    </chapter>
    <chapter title="Mounts" id="mounts">
        <p>Mounts define directories that are writable after the build is complete.
            They aren't available during the build.</p>

        <code-block lang="yaml">
            mounts:
            '&lt;DIRECTORY&gt;':
            source: &lt;SOURCE_LOCATION&gt;
            source_path: &lt;SOURCE_PATH_LOCATION&gt;
        </code-block>
        <p>The <code>&lt;DIRECTORY&gt;</code> is relative to the <a anchor="root-directory">app's root</a> and
            represents the path in the app.
            If you already have a directory with that name, you get a warning that it isn't accessible after the build.
            See how to <a href="./troubleshoot-mounts.md" anchor="overlapping-folders">troubleshoot the warning</a>.</p>
        <table>
            <tr>
                <td>Name</td>
                <td>Type</td>
                <td>Required</td>
                <td>Description</td>
            </tr>
            <tr>
                <td><code>source</code></td>
                <td><code>local</code> or <code>service</code></td>
                <td>Yes</td>
                <td>Specifies where the mount is. <code>local</code> sources are unique to the app (requires
                    <code>disk</code> to be set for the app), while <code>service</code> sources can be shared among
                    apps (requires <code>service</code> to be set here).
                </td>
            </tr>
            <tr>
                <td><code>source_path</code></td>
                <td><code>string</code></td>
                <td>Yes</td>
                <td>The subdirectory within the mounted disk (the source) where the mount should point. If an empty
                    string is passed, points to the entire directory.
                </td>
            </tr>
            <tr>
                <td><code>service</code></td>
                <td><code>string</code></td>
                <td></td>
                <td>The name of the <a href="../add-services/network-storage.md">network storage service</a>.</td>
            </tr>
        </table>
        <p>Basic example:</p>

        <code-block lang="yaml">
            mounts:
            'web/uploads':
            source: local
            source_path: uploads
        </code-block>
        <p>The accessibility to the web of a mounted directory depends on the <code>web.locations</code> configuration.
            Files can be all public, all private, or with different rules for different paths and file types.</p>
        <p>Note that mounted directories aren't deleted when they're removed from <code>.platform.app.yaml</code>.
            The files still exist on disk until manually removed.</p>
    </chapter>

</topic>